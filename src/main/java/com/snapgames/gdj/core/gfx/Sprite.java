/**
 * SnapGames
 * <p>
 * Game Development Java
 * <p>
 * gdj105
 *
 * @year 2018
 */
package com.snapgames.gdj.core.gfx;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 *
 * @author Frédéric Delorme
 *
 */
public class Sprite {

    private static int index = 0;

    int id;
    private String name;
    private BufferedImage pixels;
    private Map<String, Object> attributes = new ConcurrentHashMap<>(10);

    /**
     * Initialize the new Sprite with the pixels and name. The id filed will be
     * autogenerated from index.
     *
     * @param pixels
     * @param name
     */
    public Sprite(BufferedImage pixels, String name) {
        this.id = index++;
        this.name = name;
        this.pixels = pixels;
    }

    /**
     * Initialize the new Sprite with the id, pixels and name.
     *
     * @param id
     * @param pixels
     * @param name
     */
    public Sprite(int id, BufferedImage pixels, String name) {
        this.id = id;
        this.name = name;
        this.pixels = pixels;
    }

    /**
     * Add a key attribute with its value to this sprite.
     * this is very useful for a SpriteSheet management.
     *
     * @param key   the key for this attribute
     * @param value the value of this attribute.
     */
    public void addAttribute(String key, Object value) {
        assert (!attributes.containsKey(key));
        attributes.put(key, value);
    }

    /**
     * Retrieve the key attribute for this sprite.
     *
     * @param key the attribute key to be retrieve.
     * @return
     */
    public Object getAttribute(String key) {
        assert (attributes.containsKey(key));
        return attributes.get(key);
    }

    /**
     * Return image for this sprite.
     *
     * @return
     */
    public BufferedImage getImage() {
        return pixels;
    }

    /**
     * Simple draw operation for this sprite.
     *
     * @param g the Graphics interface to use to draw the sprite's image
     * @param x the vertical position for this sprite
     * @param y the horizontal position for this sprite
     */
    public void draw(Graphics2D g, int x, int y) {
        g.drawImage(getImage(), x, y, null);
    }

    /**
     * A draw operation taking a direction parameter.
     * If direction>0 silmple normal draw, if <0, draw in vertically flipped sprite.
     *
     * @param g         the Graphics interface to use to draw the sprite's image
     * @param x         the vertical position for this sprite
     * @param y         the horizontal position for this sprite
     * @param direction the redenring direction (1 right to left, -1 left to right).
     */
    public void draw(Graphics2D g, int x, int y, int direction) {
        if (direction > 0) {
            g.drawImage(getImage(), x, y, null);
        } else {
            g.drawImage(getImage(), x + pixels.getWidth(), y, -pixels.getWidth(), pixels.getHeight(), null);
        }
    }
}
